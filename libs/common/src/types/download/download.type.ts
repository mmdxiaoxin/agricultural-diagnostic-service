// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.12.4
// source: apps/api-gateway/src/proto/download.proto

/* eslint-disable */

/** 文件元数据 */
export interface FileMeta {
  id: number;
  originalFileName: string;
  filePath: string;
  fileSize: number;
  fileType: string;
  createdAt: string;
  updatedAt: string;
}

/** 下载单个文件请求 */
export interface DownloadFileRequest {
  fileMeta?: FileMeta | undefined;
}

/** 下载单个文件响应 */
export interface DownloadFileResponse {
  success: boolean;
  data: Uint8Array;
  message: string;
}

/** 下载文件分片 */
export interface DownloadFileChunk {
  chunk: Uint8Array;
  success: boolean;
  message: string;
}

/** 下载多个文件请求 */
export interface DownloadFilesRequest {
  filesMeta: FileMeta[];
}

/** 下载多个文件响应 */
export interface DownloadFilesResponse {
  success: boolean;
  data: Uint8Array;
  message: string;
}

function createBaseFileMeta(): FileMeta {
  return {
    id: 0,
    originalFileName: '',
    filePath: '',
    fileSize: 0,
    fileType: '',
    createdAt: '',
    updatedAt: '',
  };
}

export const FileMeta: MessageFns<FileMeta> = {
  fromJSON(object: any): FileMeta {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      originalFileName: isSet(object.originalFileName)
        ? globalThis.String(object.originalFileName)
        : '',
      filePath: isSet(object.filePath)
        ? globalThis.String(object.filePath)
        : '',
      fileSize: isSet(object.fileSize) ? globalThis.Number(object.fileSize) : 0,
      fileType: isSet(object.fileType)
        ? globalThis.String(object.fileType)
        : '',
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: FileMeta): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.originalFileName !== '') {
      obj.originalFileName = message.originalFileName;
    }
    if (message.filePath !== '') {
      obj.filePath = message.filePath;
    }
    if (message.fileSize !== 0) {
      obj.fileSize = Math.round(message.fileSize);
    }
    if (message.fileType !== '') {
      obj.fileType = message.fileType;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileMeta>, I>>(base?: I): FileMeta {
    return FileMeta.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileMeta>, I>>(object: I): FileMeta {
    const message = createBaseFileMeta();
    message.id = object.id ?? 0;
    message.originalFileName = object.originalFileName ?? '';
    message.filePath = object.filePath ?? '';
    message.fileSize = object.fileSize ?? 0;
    message.fileType = object.fileType ?? '';
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseDownloadFileRequest(): DownloadFileRequest {
  return { fileMeta: undefined };
}

export const DownloadFileRequest: MessageFns<DownloadFileRequest> = {
  fromJSON(object: any): DownloadFileRequest {
    return {
      fileMeta: isSet(object.fileMeta)
        ? FileMeta.fromJSON(object.fileMeta)
        : undefined,
    };
  },

  toJSON(message: DownloadFileRequest): unknown {
    const obj: any = {};
    if (message.fileMeta !== undefined) {
      obj.fileMeta = FileMeta.toJSON(message.fileMeta);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownloadFileRequest>, I>>(
    base?: I,
  ): DownloadFileRequest {
    return DownloadFileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownloadFileRequest>, I>>(
    object: I,
  ): DownloadFileRequest {
    const message = createBaseDownloadFileRequest();
    message.fileMeta =
      object.fileMeta !== undefined && object.fileMeta !== null
        ? FileMeta.fromPartial(object.fileMeta)
        : undefined;
    return message;
  },
};

function createBaseDownloadFileResponse(): DownloadFileResponse {
  return { success: false, data: new Uint8Array(0), message: '' };
}

export const DownloadFileResponse: MessageFns<DownloadFileResponse> = {
  fromJSON(object: any): DownloadFileResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      data: isSet(object.data)
        ? bytesFromBase64(object.data)
        : new Uint8Array(0),
      message: isSet(object.message) ? globalThis.String(object.message) : '',
    };
  },

  toJSON(message: DownloadFileResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.message !== '') {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownloadFileResponse>, I>>(
    base?: I,
  ): DownloadFileResponse {
    return DownloadFileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownloadFileResponse>, I>>(
    object: I,
  ): DownloadFileResponse {
    const message = createBaseDownloadFileResponse();
    message.success = object.success ?? false;
    message.data = object.data ?? new Uint8Array(0);
    message.message = object.message ?? '';
    return message;
  },
};

function createBaseDownloadFileChunk(): DownloadFileChunk {
  return { chunk: new Uint8Array(0), success: false, message: '' };
}

export const DownloadFileChunk: MessageFns<DownloadFileChunk> = {
  fromJSON(object: any): DownloadFileChunk {
    return {
      chunk: isSet(object.chunk)
        ? bytesFromBase64(object.chunk)
        : new Uint8Array(0),
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      message: isSet(object.message) ? globalThis.String(object.message) : '',
    };
  },

  toJSON(message: DownloadFileChunk): unknown {
    const obj: any = {};
    if (message.chunk.length !== 0) {
      obj.chunk = base64FromBytes(message.chunk);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== '') {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownloadFileChunk>, I>>(
    base?: I,
  ): DownloadFileChunk {
    return DownloadFileChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownloadFileChunk>, I>>(
    object: I,
  ): DownloadFileChunk {
    const message = createBaseDownloadFileChunk();
    message.chunk = object.chunk ?? new Uint8Array(0);
    message.success = object.success ?? false;
    message.message = object.message ?? '';
    return message;
  },
};

function createBaseDownloadFilesRequest(): DownloadFilesRequest {
  return { filesMeta: [] };
}

export const DownloadFilesRequest: MessageFns<DownloadFilesRequest> = {
  fromJSON(object: any): DownloadFilesRequest {
    return {
      filesMeta: globalThis.Array.isArray(object?.filesMeta)
        ? object.filesMeta.map((e: any) => FileMeta.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DownloadFilesRequest): unknown {
    const obj: any = {};
    if (message.filesMeta?.length) {
      obj.filesMeta = message.filesMeta.map((e) => FileMeta.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownloadFilesRequest>, I>>(
    base?: I,
  ): DownloadFilesRequest {
    return DownloadFilesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownloadFilesRequest>, I>>(
    object: I,
  ): DownloadFilesRequest {
    const message = createBaseDownloadFilesRequest();
    message.filesMeta =
      object.filesMeta?.map((e) => FileMeta.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDownloadFilesResponse(): DownloadFilesResponse {
  return { success: false, data: new Uint8Array(0), message: '' };
}

export const DownloadFilesResponse: MessageFns<DownloadFilesResponse> = {
  fromJSON(object: any): DownloadFilesResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      data: isSet(object.data)
        ? bytesFromBase64(object.data)
        : new Uint8Array(0),
      message: isSet(object.message) ? globalThis.String(object.message) : '',
    };
  },

  toJSON(message: DownloadFilesResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.message !== '') {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownloadFilesResponse>, I>>(
    base?: I,
  ): DownloadFilesResponse {
    return DownloadFilesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownloadFilesResponse>, I>>(
    object: I,
  ): DownloadFilesResponse {
    const message = createBaseDownloadFilesResponse();
    message.success = object.success ?? false;
    message.data = object.data ?? new Uint8Array(0);
    message.message = object.message ?? '';
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(''));
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
